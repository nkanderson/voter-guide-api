services:
  api: &api
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      # TODO: consider adding a `condition: healthy` check with healthcheck `psql $DATABASE_URL -c '\l'`
      - db
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - ./:/app
  db:
    image: postgres:14-alpine
    restart: "on-failure"
    expose:
      - "5432"
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
  debug_api:
    <<: *api
    # The `debug` profile prevents the debug_api service from starting by default.
    # To run the debug container instead of the default, this service can be
    # started using `docker compose up debug_api`
    profiles: ["debug"]
    command: ["sh", "-c", "pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --nothreading --noreload"]
    ports:
      - "5678:5678"
      - "8000:8000"

volumes:
  postgres_data:
